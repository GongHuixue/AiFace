package android.com.aiface.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.com.aiface.database.bean.AttendanceFace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE_FACE".
*/
public class AttendanceFaceDao extends AbstractDao<AttendanceFace, Long> {

    public static final String TABLENAME = "ATTENDANCE_FACE";

    /**
     * Properties of entity AttendanceFace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property AttendancePart = new Property(2, String.class, "attendancePart", false, "ATTENDANCE_PART");
        public final static Property AttendanceName = new Property(3, String.class, "attendanceName", false, "ATTENDANCE_NAME");
        public final static Property Onworktime = new Property(4, String.class, "onworktime", false, "ONWORKTIME");
        public final static Property Offworktime = new Property(5, String.class, "offworktime", false, "OFFWORKTIME");
    }


    public AttendanceFaceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceFaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE_FACE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT NOT NULL ," + // 1: userId
                "\"ATTENDANCE_PART\" TEXT NOT NULL ," + // 2: attendancePart
                "\"ATTENDANCE_NAME\" TEXT NOT NULL ," + // 3: attendanceName
                "\"ONWORKTIME\" TEXT," + // 4: onworktime
                "\"OFFWORKTIME\" TEXT);"); // 5: offworktime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE_FACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttendanceFace entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getAttendancePart());
        stmt.bindString(4, entity.getAttendanceName());
 
        String onworktime = entity.getOnworktime();
        if (onworktime != null) {
            stmt.bindString(5, onworktime);
        }
 
        String offworktime = entity.getOffworktime();
        if (offworktime != null) {
            stmt.bindString(6, offworktime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttendanceFace entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getAttendancePart());
        stmt.bindString(4, entity.getAttendanceName());
 
        String onworktime = entity.getOnworktime();
        if (onworktime != null) {
            stmt.bindString(5, onworktime);
        }
 
        String offworktime = entity.getOffworktime();
        if (offworktime != null) {
            stmt.bindString(6, offworktime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AttendanceFace readEntity(Cursor cursor, int offset) {
        AttendanceFace entity = new AttendanceFace( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userId
            cursor.getString(offset + 2), // attendancePart
            cursor.getString(offset + 3), // attendanceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // onworktime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // offworktime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttendanceFace entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setAttendancePart(cursor.getString(offset + 2));
        entity.setAttendanceName(cursor.getString(offset + 3));
        entity.setOnworktime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOffworktime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttendanceFace entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttendanceFace entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttendanceFace entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
