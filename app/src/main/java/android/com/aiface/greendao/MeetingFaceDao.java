package android.com.aiface.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.com.aiface.database.bean.MeetingFace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEETING_FACE".
*/
public class MeetingFaceDao extends AbstractDao<MeetingFace, Long> {

    public static final String TABLENAME = "MEETING_FACE";

    /**
     * Properties of entity MeetingFace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MeetingName = new Property(1, String.class, "meetingName", false, "MEETING_NAME");
        public final static Property MeetingTime = new Property(2, long.class, "meetingTime", false, "MEETING_TIME");
        public final static Property MeetingAddr = new Property(3, String.class, "meetingAddr", false, "MEETING_ADDR");
        public final static Property ParticipantName = new Property(4, String.class, "participantName", false, "PARTICIPANT_NAME");
        public final static Property ParticipantPart = new Property(5, String.class, "participantPart", false, "PARTICIPANT_PART");
    }


    public MeetingFaceDao(DaoConfig config) {
        super(config);
    }
    
    public MeetingFaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEETING_FACE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MEETING_NAME\" TEXT NOT NULL ," + // 1: meetingName
                "\"MEETING_TIME\" INTEGER NOT NULL ," + // 2: meetingTime
                "\"MEETING_ADDR\" TEXT NOT NULL ," + // 3: meetingAddr
                "\"PARTICIPANT_NAME\" TEXT NOT NULL ," + // 4: participantName
                "\"PARTICIPANT_PART\" TEXT NOT NULL );"); // 5: participantPart
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEETING_FACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeetingFace entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMeetingName());
        stmt.bindLong(3, entity.getMeetingTime());
        stmt.bindString(4, entity.getMeetingAddr());
        stmt.bindString(5, entity.getParticipantName());
        stmt.bindString(6, entity.getParticipantPart());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeetingFace entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMeetingName());
        stmt.bindLong(3, entity.getMeetingTime());
        stmt.bindString(4, entity.getMeetingAddr());
        stmt.bindString(5, entity.getParticipantName());
        stmt.bindString(6, entity.getParticipantPart());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeetingFace readEntity(Cursor cursor, int offset) {
        MeetingFace entity = new MeetingFace( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // meetingName
            cursor.getLong(offset + 2), // meetingTime
            cursor.getString(offset + 3), // meetingAddr
            cursor.getString(offset + 4), // participantName
            cursor.getString(offset + 5) // participantPart
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeetingFace entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeetingName(cursor.getString(offset + 1));
        entity.setMeetingTime(cursor.getLong(offset + 2));
        entity.setMeetingAddr(cursor.getString(offset + 3));
        entity.setParticipantName(cursor.getString(offset + 4));
        entity.setParticipantPart(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeetingFace entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeetingFace entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeetingFace entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
